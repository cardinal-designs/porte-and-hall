{{ 'component-product-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'section-product-carousel.css' | asset_url | stylesheet_tag }}

{% style %}
  .product-card .product-card__metafield-style {
    background: #546b82;
    color: #fff;
    font-size: 11px;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 24px;
    text-transform: uppercase;
    margin-top: 4px;
    margin-bottom: 4px;
  }

  .product-carousel .swiper-button-next, .product-carousel .swiper-button-prev { top: 27%; }
  .product-carousel .swiper-button-next { right: 0; }

  .product-card__price.body.blue { margin-top: -12px; }
  .product-carousel__container-new-2 .product-card__swatches { margin: 0; }

  @media screen and (max-width: 768px) {
    .product-carousel__container-new-2 {
      margin-left: 0; margin-right: 0; width: 100% !important;
    }
  }

  @media screen and (max-width: 575px) {
    .product-carousel .swiper-button-next { right: 18px; }
    .product-card__image { aspect-ratio: 0.9; }
    .product-card { gap: 5px; }
    .product-card__price.body.blue { margin-top: -5px; font-size: 13px; letter-spacing: .3px; }
    .product-card__title { font-size: 13px; letter-spacing: 0; }
    .product-card__title span { font-size: 13px; letter-spacing: 0; }
    .product-carousel__container-new-2 { height: 300px !important; }
    .product-carousel__container-new-2 .swiper-pagination { bottom: 20px !important; }
    .carousel-new-2__video { object-fit: cover; height: 100%; }
  }

  @media screen and (max-width: 500px) {
    .product-carousel .swiper-button-next, .product-carousel .swiper-button-prev { top: 19%; }
  }
{% endstyle %}

<div class="product-carousel__inner product-carousel__new">
  <div class="product-carousel__heading">
    <h2 class="blue">{{ section.settings.heading }}</h2>
  </div>

  <product-carousel-new-two>
    <div class="product-carousel__container-new product-carousel__container-new-2 product-carousel__container swiper">
      <div class="swiper-wrapper">
        {% for product in section.settings.collection.products limit: 4 %}
          {% for collection in product.collections %}
            {% if collection.title contains ' |' %}
              {% assign grouped_collection = collection %}
            {% endif %}
          {% endfor %}
          <div class="product-carousel__item swiper-slide">
            {% if section.settings.product_card_type == 'standard_card' %}
              {% render 'grouped-product-card-2',
                product_card_product: product,
                collection: grouped_collection,
                title: grouped_collection.title,
                button_text: section.settings.button_text
              %}
            {% else %}
              {% render 'grouped-product-card-3',
                product_card_product: product,
                collection: grouped_collection,
                title: grouped_collection.title,
                button_text: section.settings.button_text
              %}
            {% endif %}
          </div>
        {% endfor %}
      </div>
      <div class="swiper-pagination product-carousel__pagination"></div>
    </div>

    {% if section.settings.btn_link != blank %}
      <a class="shop-all-btn" href="{{ section.settings.btn_link }}">SHOP ALL BEST SELLERS</a>
    {% endif %}
  </product-carousel-new-two>
</div>

<style>
  {% if section.settings.background != blank %}
    #shopify-section-{{ section.id }}.product-carousel { background: {{ section.settings.background }}; }
  {% endif %}
</style>

<script>
(function () {
  const section = document.getElementById('shopify-section-{{ section.id }}');
  if (!section) return;

  // ==============================
  // MOBILE-ONLY REORDER (toggle)
  // ==============================
  const wrapper = section.querySelector('.swiper-wrapper');
  const mq = window.matchMedia('(max-width: 575px)');
  if (!wrapper) return;

  // Capture original order once
  const originalSlides = Array.from(wrapper.querySelectorAll('.swiper-slide'));
  originalSlides.forEach((slide, i) => { slide.dataset.originalIndex = i; });

  function getSwiperInstance() {
    const container = section.querySelector('.swiper');
    return container && container.swiper ? container.swiper : null;
  }

  function restoreDesktopOrder() {
    // Sort by original index and re-append
    const ordered = Array.from(wrapper.children)
      .sort((a, b) => (+a.dataset.originalIndex) - (+b.dataset.originalIndex));
    ordered.forEach(node => wrapper.appendChild(node));

    const swiper = getSwiperInstance();
    if (swiper) { swiper.updateSlides(); swiper.update(); }
  }

  function reorderForMobile() {
    const slides = Array.from(wrapper.children);
    const withVideo = slides
      .filter(s => s.querySelector('video.carousel-new-2__video'))
      .sort((a, b) => (+a.dataset.originalIndex) - (+b.dataset.originalIndex));
    const withoutVideo = slides
      .filter(s => !s.querySelector('video.carousel-new-2__video'))
      .sort((a, b) => (+a.dataset.originalIndex) - (+b.dataset.originalIndex));

    if (withVideo.length > 0 && withVideo.length < slides.length) {
      [...withVideo, ...withoutVideo].forEach(node => wrapper.appendChild(node));
      const swiper = getSwiperInstance();
      if (swiper) { swiper.updateSlides(); swiper.update(); }
    }
  }

  let currentLayoutIsMobile = null;
  function applyLayout(isMobile) {
    if (currentLayoutIsMobile === isMobile) return;
    currentLayoutIsMobile = isMobile;
    if (isMobile) reorderForMobile(); else restoreDesktopOrder();
  }

  // Initial + listener
  applyLayout(mq.matches);
  if (mq.addEventListener) mq.addEventListener('change', e => applyLayout(e.matches));
  else mq.addListener(e => applyLayout(e.matches));

  // ==============================
  // VIDEO SEQUENCING + OPACITY SWAP
  // (desktop + mobile, one-at-a-time)
  // ==============================
  const videos = Array.from(section.querySelectorAll('video.carousel-new-2__video'));
  if (!videos.length) return;

  const isVisible = (el) => el.offsetParent !== null && getComputedStyle(el).visibility !== 'hidden';

  function getCard(videoEl) {
    return videoEl.closest('.product-card__image') || videoEl.parentElement;
  }

  function getImg(videoEl) {
    const box = getCard(videoEl);
    if (!box) return null;
    let img = box.querySelector('img.img-fill.hide-mobile');
    if (!img) img = box.querySelector('img.img-fill');
    if (!img) img = box.querySelector('img');
    return img;
  }

  function prepLayering(videoEl, imgEl) {
    const box = getCard(videoEl);
    if (box && getComputedStyle(box).position === 'static') { box.style.position = 'relative'; }
    Object.assign(videoEl.style, {
      position: 'absolute', inset: '0',
      width: '100%', height: '100%',
      objectFit: 'cover', zIndex: '2',
      transition: 'opacity 200ms ease'
    });
    if (imgEl) {
      Object.assign(imgEl.style, {
        position: 'absolute', inset: '0',
        width: '100%', height: '100%',
        objectFit: 'cover', zIndex: '1',
        transition: 'opacity 200ms ease'
      });
    }
  }

  function showImage(img) {
    if (!img) return;
    img.style.setProperty('display', 'block', 'important');
    img.style.opacity = '1';
    img.removeAttribute('aria-hidden');
  }
  function hideImage(img) {
    if (!img) return;
    img.style.opacity = '0';
    setTimeout(() => {
      img.style.setProperty('display', 'none', 'important');
      img.setAttribute('aria-hidden', 'true');
    }, 200);
  }
  function showVideo(v) {
    v.style.opacity = '1';
    v.style.setProperty('display', 'block', 'important');
  }
  function hideVideo(v) { v.style.opacity = '0'; }

  function pauseAndShowImage(v) {
    try { v.pause(); } catch(_) {}
    hideVideo(v);
    const img = getImg(v);
    showImage(img);
  }

  // Prepare each card
  videos.forEach(v => {
    const img = getImg(v);
    prepLayering(v, img);

    // Ensure desktop visibility despite Liquid "hide-desktop"
    v.classList.remove('hide-desktop');
    v.style.setProperty('display', 'block', 'important');

    // Ensure 'ended' fires for sequencing (Liquid sets loop: true)
    v.removeAttribute('loop');
    v.muted = true;
    v.autoplay = false;
    v.playsInline = true;
    v.preload = v.preload || 'metadata';

    // Initial: image visible, video hidden
    showImage(img);
    hideVideo(v);

    v.addEventListener('play', () => {
      videos.forEach(o => { if (o !== v) pauseAndShowImage(o); });
      hideImage(getImg(v));
      showVideo(v);
    });

    v.addEventListener('pause', () => {
      if (!v.ended) {
        hideVideo(v);
        showImage(getImg(v));
      }
    });
  });

  // One-at-a-time sequencing across visible videos
  const visibleVideos = () => videos.filter(isVisible);
  let seq = [], idx = 0;

  function rebuild() {
    seq = visibleVideos();
    if (idx >= seq.length) idx = 0;
  }

  function playAt(i) {
    rebuild();
    if (!seq.length) return;

    idx = (i + seq.length) % seq.length;
    const current = seq[idx];

    videos.forEach(v => { if (v !== current) pauseAndShowImage(v); });

    hideImage(getImg(current));
    showVideo(current);
    try { if (current.ended || current.currentTime > 0) current.currentTime = 0; } catch(_) {}

    const p = current.play();
    if (p && p.catch) p.catch(() => {});

    seq.forEach(v => v.removeEventListener('ended', handleEnded));
    current.addEventListener('ended', handleEnded, { once: true });
  }

  function handleEnded() {
    const justEnded = seq[idx];
    if (justEnded) {
      hideVideo(justEnded);
      showImage(getImg(justEnded));
    }
    playAt(idx + 1);
  }

  const start = () => { rebuild(); if (seq.length) playAt(0); };
  if (videos.some(v => v.readyState < 1)) {
    let left = videos.length, started = false;
    const done = () => { if (!started && --left <= 0) { started = true; start(); } };
    videos.forEach(v => {
      if (v.readyState >= 1) done();
      else { v.addEventListener('loadedmetadata', done, { once: true }); setTimeout(done, 1200); }
    });
  } else {
    start();
  }
})();
</script>

{% schema %}
{
  "name": "Product Carousel New 2",
  "tag": "section",
  "class": "product-carousel with-spacing",
  "settings": [
    { "type": "textarea", "id": "heading", "label": "Heading" },
    { "type": "color", "id": "background", "label": "Background" },
    { "type": "checkbox", "id": "show_metafield_style", "label": "Show metafield style", "default": false },
    { "type": "collection", "id": "collection", "label": "Collection" },
    {
      "type": "select",
      "id": "product_card_type",
      "label": "Product Card Type",
      "options": [
        { "label": "Standard Card", "value": "standard_card" },
        { "label": "Video Card (metafield)", "value": "video_card" }
      ],
      "default": "standard_card"
    },
    { "type": "text", "id": "button_text", "label": "Button text", "default": "Shop Now" },
    { "type": "url", "id": "btn_link", "label": "Bottom Button Link" }
  ],
  "presets": [ { "name": "Product Carousel New 2" } ]
}
{% endschema %}