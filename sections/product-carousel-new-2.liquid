{{ 'component-product-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'section-product-carousel.css' | asset_url | stylesheet_tag }}

{% style %}
  .product-card .product-card__metafield-style {
    background: #546b82;
    color: #fff;
    font-size: 11px;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 24px;
    text-transform: uppercase;
    margin-top: 4px;
    margin-bottom: 4px;
  }

  .product-carousel .swiper-button-next, .product-carousel .swiper-button-prev {
    top: 27%;
  }

  .product-carousel .swiper-button-next {
    right: 0;
  }

 .product-card__price.body.blue {
    margin-top: -12px;
  }

  
  .product-carousel__container-new-2 .product-card__swatches {
    margin: 0;
  }

  @media screen and (max-width: 768px) {
    .product-carousel__container-new-2 {
      margin-left: 0;
      margin-right: 0;
      width: 100% !important;
    }
  }
  
  @media screen and (max-width: 575px) {
    .product-carousel .swiper-button-next {
      right: 18px;
    }

    .product-card__image {
      aspect-ratio: 0.9;
    }

    .product-card {
      gap: 5px;
    }

    .product-card__price.body.blue {
      margin-top: -5px;
      font-size: 13px;
      letter-spacing: .3px;
    }

    .product-card__title {
      font-size: 13px;
      letter-spacing: 0;
    }

     .product-card__title span {
      font-size: 13px;
      letter-spacing: 0;
    }

    .product-carousel__container-new-2 {
      height: 300px !important;
    }
  
    .product-carousel__container-new-2 .swiper-pagination {
      bottom: 20px !important;
    }

    .carousel-new-2__video {
      object-fit: cover;
      height: 100%;
    }
  }
  
 @media screen and (max-width: 500px) {
  .product-carousel .swiper-button-next, .product-carousel .swiper-button-prev {
    top: 19%;
  }
 }
{% endstyle %}

<div class="product-carousel__inner product-carousel__new">
  <div class="product-carousel__heading">
    <h2 class="blue">{{ section.settings.heading }}</h2>
  </div>

  <product-carousel-new-two>
    <div class="product-carousel__container-new product-carousel__container-new-2 product-carousel__container swiper">
      <div class="swiper-wrapper">
        {% for product in section.settings.collection.products limit: 4 %}
          {% for collection in product.collections %}
            {% if collection.title contains ' |' %}
              {% assign grouped_collection = collection %}
            {% endif %}
          {% endfor %}
          <div class="product-carousel__item swiper-slide">
            {% if section.settings.product_card_type == 'standard_card' %}
            {% render 'grouped-product-card-2',
              product_card_product: product,
              collection: grouped_collection,
              title: grouped_collection.title,
              button_text: section.settings.button_text
            %}
          {% else %}
            {% render 'grouped-product-card-3',
              product_card_product: product,
              collection: grouped_collection,
              title: grouped_collection.title,
              button_text: section.settings.button_text
            %}
          {% endif %}
          </div>
        {% endfor %}
      </div>
      <div class="swiper-pagination product-carousel__pagination"></div>
    </div>
    {% if section.settings.btn_link != blank %}
    <a class="shop-all-btn" href="{{ section.settings.btn_link }}">SHOP ALL BEST SELLERS</a>
    {% endif %}
  </product-carousel-new-two>
</div>

<style>
  {% if section.settings.background != blank %}
    #shopify-section-{{section.id }}.product-carousel {
      background: {{ section.settings.background }};
    }
  {% endif %}
</style>

<script>
(function () {
  const section = document.getElementById('shopify-section-{{ section.id }}');
  if (!section) return;

  const videos = Array.from(section.querySelectorAll('video.carousel-new-2__video'));
  if (!videos.length) return;

  // ————— Utils —————
  const isVisible = el =>
    el.offsetParent !== null && getComputedStyle(el).visibility !== 'hidden';

  // Try hard to get a usable image URL from the card for the poster
  function getPosterURL(videoEl) {
    const box = videoEl.closest('.product-card__image') || videoEl.parentElement;
    if (!box) return '';

    // Prefer the featured image the snippet renders (any <img> inside the image box)
    const img = box.querySelector('img');
    if (!img) return '';

    // Try currentSrc, else src, else data-* attributes, else first url from srcset
    let url = img.currentSrc || img.src || img.getAttribute('data-src') || '';
    if (!url) {
      const ds = img.getAttribute('data-srcset') || img.getAttribute('srcset') || '';
      if (ds) {
        const first = ds.split(',')[0];
        if (first) url = first.trim().split(' ')[0];
      }
    }
    return url || '';
  }

  function visibleVideos() {
    return videos.filter(isVisible);
  }

  function pauseAndShowPoster(v) {
    try { v.pause(); } catch (_) {}
    // Force the poster to show again
    // (load() resets the element to its poster state)
    try { v.load(); } catch (_) {}
  }

  // ————— Prep videos —————
  videos.forEach(v => {
    v.loop = false;            // we need 'ended'
    v.muted = true;
    v.autoplay = false;        // controlled by script
    v.playsInline = true;
    v.preload = v.preload || 'metadata';
    v.style.objectFit = 'cover'; // keeps poster/video covered

    // Attach poster (once)
    const poster = getPosterURL(v);
    if (poster) v.poster = poster;

    // If user taps to play, keep only one playing and hide poster automatically
    v.addEventListener('play', () => {
      videos.forEach(other => { if (other !== v) pauseAndShowPoster(other); });
    }, { passive: true });

    // If user pauses before end, revert to poster
    v.addEventListener('pause', () => { if (!v.ended) pauseAndShowPoster(v); }, { passive: true });
  });

  // ————— Sequencing (mobile only since desktop videos are hidden) —————
  let seq = [], idx = 0;

  function rebuild() {
    seq = visibleVideos();
    if (idx >= seq.length) idx = 0;
  }

  function playAt(i) {
    rebuild();
    if (!seq.length) return;

    idx = (i + seq.length) % seq.length;
    const current = seq[idx];

    // Ensure all others show their poster
    videos.forEach(v => { if (v !== current) pauseAndShowPoster(v); });

    // Restart current at 0 and play
    try { if (current.ended || current.currentTime > 0) current.currentTime = 0; } catch(_) {}
    const p = current.play();
    if (p && p.catch) p.catch(() => { /* autoplay block - ignore */ });

    // Listen once, then advance
    seq.forEach(v => v.removeEventListener('ended', handleEnded));
    current.addEventListener('ended', handleEnded, { once: true });
  }

  function handleEnded() {
    // Show poster for the one that just finished
    const v = seq[idx];
    if (v) pauseAndShowPoster(v);
    // Advance to next
    // Small timeout helps browsers render poster before next play
    setTimeout(() => playAt(idx + 1), 0);
  }

  // Recalculate when viewport changes (mobile/desktop swap)
  const mq = window.matchMedia('(max-width: 575px)');
  const onChange = () => { rebuild(); if (seq.length) playAt(idx); };
  if (mq && mq.addEventListener) mq.addEventListener('change', onChange);
  else window.addEventListener('resize', () => requestAnimationFrame(onChange));

  // Initial state: everyone shows their poster until it's their turn
  videos.forEach(pauseAndShowPoster);

  // Start once metadata is available so durations/states are sane
  const start = () => { rebuild(); if (seq.length) playAt(0); };
  if (videos.some(v => v.readyState < 1)) {
    let left = videos.length, started = false;
    const done = () => { if (!started && --left <= 0) { started = true; start(); } };
    videos.forEach(v => {
      if (v.readyState >= 1) done();
      else { v.addEventListener('loadedmetadata', done, { once: true }); setTimeout(done, 1500); }
    });
  } else {
    start();
  }

  // ——— Debug helper (optional): uncomment to verify posters are set ———
  // videos.forEach((v,i) => console.log('video', i, 'poster:', v.poster));
})();
</script>

{% schema %}
{
  "name": "Product Carousel New 2",
  "tag": "section",
  "class": "product-carousel with-spacing",
  "settings": [
    {
      "type": "textarea",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background"
    },
    {
      "type": "checkbox",
      "id": "show_metafield_style",
      "label": "Show metafield style",
      "default": false
    },    
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "select",
      "id": "product_card_type",
      "label": "Product Card Type",
      "options": [
        {
          "label": "Standard Card",
          "value": "standard_card"
        },
        {
          "label": "Video Card (metafield)",
          "value": "video_card"
        }
      ],
      "default": "standard_card"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Shop Now"
    },
    {
      "type": "url",
      "id": "btn_link",
      "label": "Bottom Button Link"
    }
  ],
  "presets": [
    {
      "name": "Product Carousel New 2"
    }
  ]
}
{% endschema %}
