{{ 'component-product-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'section-product-carousel.css' | asset_url | stylesheet_tag }}

{% style %}
  .product-card .product-card__metafield-style {
    background: #546b82;
    color: #fff;
    font-size: 11px;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 24px;
    text-transform: uppercase;
    margin-top: 4px;
    margin-bottom: 4px;
  }

  .product-carousel .swiper-button-next, .product-carousel .swiper-button-prev {
    top: 27%;
  }

  .product-carousel .swiper-button-next {
    right: 0;
  }

 .product-card__price.body.blue {
    margin-top: -12px;
  }

  
  .product-carousel__container-new-2 .product-card__swatches {
    margin: 0;
  }

  @media screen and (max-width: 768px) {
    .product-carousel__container-new-2 {
      margin-left: 0;
      margin-right: 0;
      width: 100% !important;
    }
  }
  
  @media screen and (max-width: 575px) {
    .product-carousel .swiper-button-next {
      right: 18px;
    }

    .product-card__image {
      aspect-ratio: 0.9;
    }

    .product-card {
      gap: 5px;
    }

    .product-card__price.body.blue {
      margin-top: -5px;
      font-size: 13px;
      letter-spacing: .3px;
    }

    .product-card__title {
      font-size: 13px;
      letter-spacing: 0;
    }

     .product-card__title span {
      font-size: 13px;
      letter-spacing: 0;
    }

    .product-carousel__container-new-2 {
      height: 300px !important;
    }
  
    .product-carousel__container-new-2 .swiper-pagination {
      bottom: 20px !important;
    }

    .carousel-new-2__video {
      object-fit: cover;
      height: 100%;
    }
  }
  
 @media screen and (max-width: 500px) {
  .product-carousel .swiper-button-next, .product-carousel .swiper-button-prev {
    top: 19%;
  }
 }
{% endstyle %}

<div class="product-carousel__inner product-carousel__new">
  <div class="product-carousel__heading">
    <h2 class="blue">{{ section.settings.heading }}</h2>
  </div>

  <product-carousel-new-two>
    <div class="product-carousel__container-new product-carousel__container-new-2 product-carousel__container swiper">
      <div class="swiper-wrapper">
        {% for product in section.settings.collection.products limit: 4 %}
          {% for collection in product.collections %}
            {% if collection.title contains ' |' %}
              {% assign grouped_collection = collection %}
            {% endif %}
          {% endfor %}
          <div class="product-carousel__item swiper-slide">
            {% if section.settings.product_card_type == 'standard_card' %}
            {% render 'grouped-product-card-2',
              product_card_product: product,
              collection: grouped_collection,
              title: grouped_collection.title,
              button_text: section.settings.button_text
            %}
          {% else %}
            {% render 'grouped-product-card-3',
              product_card_product: product,
              collection: grouped_collection,
              title: grouped_collection.title,
              button_text: section.settings.button_text
            %}
          {% endif %}
          </div>
        {% endfor %}
      </div>
      <div class="swiper-pagination product-carousel__pagination"></div>
    </div>
    {% if section.settings.btn_link != blank %}
    <a class="shop-all-btn" href="{{ section.settings.btn_link }}">SHOP ALL BEST SELLERS</a>
    {% endif %}
  </product-carousel-new-two>
</div>

<style>
  {% if section.settings.background != blank %}
    #shopify-section-{{section.id }}.product-carousel {
      background: {{ section.settings.background }};
    }
  {% endif %}
</style>

<script>
(function () {
  const section = document.getElementById('shopify-section-{{ section.id }}');
  if (!section) return;

  const allVideos = Array.from(section.querySelectorAll('video.carousel-new-2__video'));
  if (!allVideos.length) return;

  // Only sequence videos that are actually visible (mobile)
  const visibleVideos = () =>
    allVideos.filter(v => v.offsetParent !== null && getComputedStyle(v).visibility !== 'hidden');

  // Grab the mobile-hidden placeholder image from the same card
  function getPlaceholderFor(videoEl) {
    const wrap = videoEl.closest('.product-card__image');
    if (!wrap) return null;
    // Prefer the featured media image the snippet renders with classes 'img-fill hide-mobile'
    // (works with <img> or <picture> -> <img>)
    let img = wrap.querySelector('img.img-fill.hide-mobile');
    if (!img) {
      // fallback: any img with hide-mobile
      img = wrap.querySelector('img.hide-mobile');
    }
    return img;
  }

  function reallyShow(el) {
    // remove class-based hiding and hard-override display
    el.classList.remove('hide-mobile');
    el.style.opacity = '1';
    el.style.removeProperty('display');
    el.style.setProperty('display', 'block', 'important');
    el.removeAttribute('aria-hidden');
  }

  function reallyHide(el) {
    // add class back so CSS handles it; keep opacity for fade
    el.classList.add('hide-mobile');
    el.style.opacity = '0';
    el.setAttribute('aria-hidden', 'true');
  }

  function showPlaceholder(imgEl) { if (imgEl) reallyShow(imgEl); }
  function hidePlaceholder(imgEl) { if (imgEl) reallyHide(imgEl); }

  function pauseOthers(except) {
    allVideos.forEach(v => {
      if (v !== except) {
        try { v.pause(); } catch (e) {}
        showPlaceholder(getPlaceholderFor(v));
      }
    });
  }

  // Prep videos
  allVideos.forEach(v => {
    v.loop = false;
    v.muted = true;
    v.autoplay = false;
    v.playsInline = true;
    v.preload = v.preload || 'metadata';

    v.addEventListener('play', () => {
      pauseOthers(v);
      hidePlaceholder(getPlaceholderFor(v));
    }, { passive: true });

    v.addEventListener('pause', () => {
      if (!v.ended) showPlaceholder(getPlaceholderFor(v));
    }, { passive: true });
  });

  // Sequencing
  let idx = 0, seq = [];
  function rebuildSequence() {
    seq = visibleVideos();
    if (idx >= seq.length) idx = 0;
  }

  function playAt(i) {
    rebuildSequence();
    if (!seq.length) return;

    idx = (i + seq.length) % seq.length;
    const current = seq[idx];

    pauseOthers(current);
    hidePlaceholder(getPlaceholderFor(current));

    try { if (current.ended || current.currentTime > 0) current.currentTime = 0; } catch(e) {}

    const p = current.play();
    if (p && p.catch) p.catch(() => {});

    seq.forEach(v => v.removeEventListener('ended', handleEnded));
    current.addEventListener('ended', handleEnded, { once: true });
  }

  function handleEnded() {
    const endedVideo = seq[idx];
    if (endedVideo) showPlaceholder(getPlaceholderFor(endedVideo));
    playAt(idx + 1);
  }

  // Viewport changes -> rebuild
  const mq = window.matchMedia('(max-width: 575px)');
  const onViewportChange = () => { rebuildSequence(); playAt(idx); };
  if (mq && mq.addEventListener) {
    mq.addEventListener('change', onViewportChange);
  } else {
    window.addEventListener('resize', () => {
      if (onViewportChange._rAF) cancelAnimationFrame(onViewportChange._rAF);
      onViewportChange._rAF = requestAnimationFrame(onViewportChange);
    });
  }

  // Initialize: make sure every card shows its image until it’s that card’s turn
  allVideos.forEach(v => showPlaceholder(getPlaceholderFor(v)));

  // Start after metadata
  const start = () => { rebuildSequence(); if (seq.length) playAt(0); };
  const needMeta = allVideos.some(v => v.readyState < 1);
  if (needMeta) {
    let pending = allVideos.length, started = false;
    const onMeta = () => { if (!started && --pending <= 0) { started = true; start(); } };
    allVideos.forEach(v => {
      if (v.readyState >= 1) onMeta();
      else { v.addEventListener('loadedmetadata', onMeta, { once: true }); setTimeout(onMeta, 1500); }
    });
  } else {
    start();
  }
})();
</script>

{% schema %}
{
  "name": "Product Carousel New 2",
  "tag": "section",
  "class": "product-carousel with-spacing",
  "settings": [
    {
      "type": "textarea",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background"
    },
    {
      "type": "checkbox",
      "id": "show_metafield_style",
      "label": "Show metafield style",
      "default": false
    },    
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "select",
      "id": "product_card_type",
      "label": "Product Card Type",
      "options": [
        {
          "label": "Standard Card",
          "value": "standard_card"
        },
        {
          "label": "Video Card (metafield)",
          "value": "video_card"
        }
      ],
      "default": "standard_card"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Shop Now"
    },
    {
      "type": "url",
      "id": "btn_link",
      "label": "Bottom Button Link"
    }
  ],
  "presets": [
    {
      "name": "Product Carousel New 2"
    }
  ]
}
{% endschema %}
